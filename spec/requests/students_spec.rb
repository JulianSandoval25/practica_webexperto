require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/students", type: :request do


  describe "GET /index" do

    it "renders a successful response" do
      get students_url
      expect(response).to be_successful
    end
  end
  describe "GET /students/{id}" do
    let!(:estudiante) { create(:student) }

    it "should return a students" do
      get "/students/#{estudiante.id}.json"
      payload = JSON.parse(response.body)
      expect(payload).to_not be_empty
      expect(payload["id"]).to eq(estudiante.id)
      expect(response).to have_http_status(200)
    end
  end

  describe "with data in the DB" do
    let!(:estudiantes) { create_list(:student,10) }
    it "should return all the students" do
      get "/students.json"
      payload = JSON.parse(response.body)
      expect(payload.size).to eq(estudiantes.size)
      expect(response).to have_http_status(200)
    end
  end

  describe "POST /students" do

    it "creates a new Student" do
      req_payload ={
        student: {
          nombre: "Juan",
          apellido: "Perez",
          email: "juanperez@mail.com"
        }
      }
      post "/students.json", params: req_payload
      payload = JSON.parse(response.body)
      expect(payload).to_not be_empty
      expect(payload["id"]).to_not be_nil
      expect(response).to have_http_status(:created)
    end

    it "should return error message on invalid student" do
      req_payload ={
        student: {
          email: "juanperez@mail.com"
        }
      }
      post "/students.json", params: req_payload
      payload = JSON.parse(response.body)
      expect(payload["nombre"]).to include("can't be blank")
      expect(payload["apellido"]).to include("can't be blank")
      expect(response).to have_http_status(:unprocessable_entity)
    end
  end

end
